项目简介：制作这个项目分为四个阶段
       第一阶段：通过制作客户端来熟悉Go开发，多线程和网络开发
       第二阶段：通过制作服务端创建一个企业框架级别的服务，要用到各种高效的方法和工具
       第三阶段：往项目里添加更多刁钻的需求，积累处理业务逻辑经验，掌握各种工具用法
       第四阶段：在网上学习各种框架和工具，并想办法添加到该项目里

项目亮点：
    1. gorm
    2. ants协程池
    3. 登录注册功能，匹配功能，实时聊天功能
    4. redis Zset实现排行榜功能
    5. 读写锁 -> 匹配功能
    6. 客户端短连接，用到了类似cookie的东西
    7. 基于tcp，socket编程
    
竞赛经历：
    1. 解决问题时有思路
    2. 直面压力的能力
    3. 解决问题时会想到他的最坏情况
    4. 团队之间沟通配合的能力
    5. 为我的人生增加了一个特长和爱好，交了很多朋友

实习经历：
    1. 熟悉开发流程，业务端提需求，制作文档(每个接口的功能，请求和响应参数，数据库的结构等等)，
       分配接口，开发完成后自测，提测，把代码提上去审核，和上下游联调，联调没问题就可以将服务
       上线了。
    2. 学到了很多新技术，更重要的是见识到了新技术，比如gorm，redis，协程池，拉模式推模式，
       项目的框架，每个一段时间就会重新看一遍公司的代码，每一次都会有新的体会。
    3. 严谨的态度，我们是一个团队完成这个需求，团队交给我这个任务是信任我，我不能辜负团队对我的
       信任，我写完代码都会再检查好几遍，自测的时候也会多测一些极端的情况，尽量不影响别人进度，
       不给团队造成损失。
    4. 团队沟通的重要性，遇到困难或疑问要第一时间和他人沟通，如果说别人说的是A，但我理解成了B，
       那这份工作就白做了，会严重耽误其他人的进度，也会辜负团队对我的信任。因此在开发之前一定
       要把自己的任务和其他人沟通好，尽量少做无用功。然后在开发时也要及时做反馈，要让别人知道
       我的工作进度，有利于团队合作。

个人优点：
    1. 我想帮助他人，我想为团队做出贡献，因此我在公司工作时要比在学校学习时更加认真，我想在
       团队中成为主力，成为做出最大贡献的那个人，因为我想体现自己的价值，我想被别人需要。
    2. 两年的竞赛经历是我在写代码的时候进入一种十分专注的状态，就是那种心流的状态。
    3. 同时我在解决问题时也会有自己的思路，在打比赛之前，我思考问题都是硬想，就只是在脑海里搜索有
       没有做过类似的题，而没有思路，但是打比赛之后，我看一个问题会先看这个问题的本质，有什么特性，
       然后再一步一步思考这样解决问题，效率会更高。
    4. 代码就是思路的体现，代码出了bug说思路出了问题，而找bug改bug就是一个提升自己的过程。而竞赛
       过程中我改了太多bug，因此我的思路和之前相比有了很大的提升，后期写算法题写个200多行代码也没
       有bug。我们找bug面临的都是更严峻的情况，代码交上去就说错了，但是不告诉数据，只能一遍一遍的
       看代码，一次一次地尝试最坏情况，然后不断地复盘思路才能找到问题，所以经历了这个过程，很大提升
       了我找bug和改bug的能力。在实际项目中，找bug要更简单，因为有错误日志，还可以看数据库的的数据，
       还可以通过调试一步步定位bug，我想说我的这个能力是有经过锻炼的，在面试中是更有优势的。
    5. 实习经历让我有了更多的专业知识，有了工作经验，这是我的优势。
    6. 我是一个注重实践，并且在实践中学习的人，遇到问题我会优先去设计一个实验，根据实验结果来看穿
       问题的本质，加深自己的印象，如果只是在网上搜答案，那印象不是很深，只有动手实践过才会有更加
       深刻的记忆。
    7. 熟悉后端开发流程，拥有严谨的开发态度

我遇到的难点：
一开始：
   1. 我不知道如何基于TCP搭建服务端和客户端，我不知道连接和网络的本质

客户端：
   1. 在如何同步心跳协程，接收协程和游戏协程的问题上犯难，以及要不要加入一个总控制协程。还要保证协程
      会正常关闭不堆积，这个也耗费了很多心思。
   2. 对Go语言的语法和机制都不是很了解。
   3. 总感觉重连机制里有冲突，因为有两个协程都会申请重连，连接也经常会用到，后来想能不能用锁来解决。
   4. 如何响应键盘按下，并设计取消匹配机制
   5. 重新设计游戏机制，删除了停牌功能，改为等待结果，符合条件就自动等待结果。
   6. 不想要全部退出后重连，想要在线重连，为了这个废了非常多心思。

服务端：
   1. 长连接要维持一个线程，如果同时登陆用户太多线程也会太多，同时客户端那边也不好写，同时不能立刻知道
   重连的用户身份。
   2. 我知道server这个变量究竟是干什么的了，服务端有很多线程，所以server中就有一些公用的方法，以及
   公用的元素比如数据库，redis这些，否则的话我接口想要用一个东西，这个东西存在哪呢，只有存在调用这个
   接口的server中才是合情合理。
   3. 学习gorm的用法和机制，并在本地搭建mysql，将访问固定表的操作集成在UserDao中
   4. 学习redis以及go-redis的用法和机制，使用redis的ZSet的类型，redis的缺点是只能存字符串，做不到像
   mysql那样为所欲为。
   5. 学习互斥锁和读写锁的用法和机制。
   6. 构思一个匹配机制以及实现方法，一开始想用redis的ZSet去实现，但是考虑到要加锁以及写起来麻烦，如果
   使用redis，A和B同时发现C可以匹配，那么A和C匹配后，B会删除没有元素而报错，理论上可以实现但是会出现
   一堆这样重复删除的情况，如果改用在本地搞，我用锁就能很轻松的避免这些问题。如果给整个匹配过程加锁，
   似乎可以避免这个问题，但是这样一通操作绝对是弊大于利的。于是我在本地设置了三个东西，一个是房间列表，
   一个是待匹配房间号列表，一个是空余房间号队列，这三个互相配合再加上适当的锁操作，就实现了匹配机制。
   7. 构思取消匹配的机制，在循环检测是否匹配成功时，先判断是否触发取消匹配，这个一开始在想能不能用通道
   去搞，但后来发现没必要，循环扫描就好，很多企业的代码也是这么搞的。

可以预见的接下来的困难：
   1. 使用协程池
   2. 构思聊天的机制，并写出来
   3. 服务端超时退出房间

当前需求：搞清楚四川麻将服务端的逻辑

1. 搭建聊天系统
       
2. 搞清楚四川麻将客户端的逻辑   完成
    子需求：搞清楚 struct{} 的作用
    子需求：多次重连会不会导致协程堆积？
    tip: 值传递是很麻烦的，因为很多结构里都有指针，值传递后指针指向的是同一个值，这会出现很多
        问题，而且Go里没有引用类型，所以大部分情况都要使用指针。
    子需求：测试log定向文件是否一直好用。
    子需求：重连和客户端设计冲突了，这个要处理一下
    子需求：如果无缓存的通道已满，那么后续的数据是否会直接丢弃？
    子需求：Tick和NewTicker的区别？
    子需求：取消匹配那里需要改一下。
    实验：通道关闭后还会阻塞吗？
    子需求：搞清楚Golang的变量生命周期

3. 搞清楚四川麻将服务端的逻辑

4. 搞懂docker和k8s是什么，并将我的项目里利用这二者

5. 搞懂什么是数据库连接池，并基于sql.DB实现数据库连接池